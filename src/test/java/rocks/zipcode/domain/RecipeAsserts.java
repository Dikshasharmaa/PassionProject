package rocks.zipcode.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RecipeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeAllPropertiesEquals(Recipe expected, Recipe actual) {
        assertRecipeAutoGeneratedPropertiesEquals(expected, actual);
        assertRecipeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeAllUpdatablePropertiesEquals(Recipe expected, Recipe actual) {
        assertRecipeUpdatableFieldsEquals(expected, actual);
        assertRecipeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeAutoGeneratedPropertiesEquals(Recipe expected, Recipe actual) {
        assertThat(expected)
            .as("Verify Recipe auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeUpdatableFieldsEquals(Recipe expected, Recipe actual) {
        assertThat(expected)
            .as("Verify Recipe relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCuisine()).as("check cuisine").isEqualTo(actual.getCuisine()))
            .satisfies(e -> assertThat(e.getDifficultyLevel()).as("check difficultyLevel").isEqualTo(actual.getDifficultyLevel()))
            .satisfies(e -> assertThat(e.getPreparationTime()).as("check preparationTime").isEqualTo(actual.getPreparationTime()))
            .satisfies(e -> assertThat(e.getCookingTime()).as("check cookingTime").isEqualTo(actual.getCookingTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeUpdatableRelationshipsEquals(Recipe expected, Recipe actual) {}
}
